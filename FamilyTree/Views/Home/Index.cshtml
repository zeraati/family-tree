@{
    ViewData["Title"] = "Manage Family";
}

@section styles {
    <style>
        html, body {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            overflow: hidden;
            font-family: Helvetica;
        }

        #tree {
            width: 100%;
            height: 100%;
        }

        .person-photo {transition: transform .2s;transform-origin:10.5% 5.5%}
        .person-photo:hover {transform:scale(1.8);transform-origin:10.5% 5.5%}

        @Html.Raw(ViewData["item-color-style"])

    </style>
}

@if(ViewData["family-tree"]=="-1"){
    <div class="form-div">
        <div class="form-field"><input id="user-name" type="text" placeholder="Username" required/></div>
        <div class="form-field"><input id="pass" type="password" placeholder="Password" required/></div>
        <div class="form-field"><p id="login-message">@ViewData["login-message"]</p></div>
        <div class="form-field"><button class="btn" onclick="login()">Log in</button></div>
    </div>
}else
{
    <div id="tree"></div>
}

@section scripts{
    <script>

        const login=()=>{
            let userName=document.getElementById("user-name").value;
            let pass=document.getElementById("pass").value;
            window.location.search = '?username='+userName+'&pass='+pass;
        }

        FamilyTree.elements.textarea = function (data, editElement, minWidth, readOnly) {
            var id = FamilyTree.elements.generateId();
            var value = data[editElement.binding];
            if (value == undefined) value = '';
            if (readOnly && !value) return { html: '' };
            var readOnlyAttr = readOnly ? 'readonly' : '';
            var disabledAttr = readOnly ? 'disabled' : '';
            return {
                html: `<label for="${id}">${editElement.label}</label>
                                                                      <textarea ${disabledAttr} ${readOnlyAttr} id="${id}" name="${id}" style="width: 100%;height: 100px;" data-binding="${editElement.binding}">${value}</textarea>`,
                id: id,
                value: value
            };
        };

        var stringJson = '@Html.Raw(ViewData["family-tree"])'
            .replaceAll('Person', 'https://' + window.location.host + '/Person')
            .replaceAll('\n', '\\n');
        var data = JSON.parse(stringJson);

        var family = new FamilyTree(document.getElementById("tree"), {
            //mouseScrool: FamilyTree.action.none,
            mouseScrool: FamilyTree.action.scroll,
            showYScroll: FamilyTree.scroll.visible,
            showXScroll: FamilyTree.scroll.visible,
            menu: {
                pdf: { text: "Export PDF" }
            },
            nodeBinding: {
                field_0: "name",
                field_1: 'deathDate',
                img_0: "photo"
            },
            nodes: data,
            nodeMenu: {},
            editForm: {
                addMore: null,
                generateElementsFromFields: false,
                photoBinding: "photo",
                elements: [
                    [{ type: 'textbox', label: 'Full Name', binding: 'name' },
                    {
                        type: 'select',
                        options: [{ value: 'male', text: 'Male' }, { value: 'female', text: 'Female' }],
                        label: 'Gender', binding: 'gender'
                    }],
                    [
                        { type: 'date', label: 'Date Of Birth', binding: 'birthDate' },
                        { type: 'date', label: 'Date Of Death', binding: 'deathDate' }
                    ],
                    { type: 'textbox', label: 'Photo Url', binding: 'photo', btn: 'Upload' },
                    { type: 'textbox', label: 'Background Color', binding: 'backgroundColor' },
                    [{ type: 'textarea', label: 'Description:', binding: 'description' }]
                ],
                buttons: { share: null, pdf: null }
            },
            enableSearch: false,
        });


        family.editUI.on('element-btn-click', function (sender, args) {
            FamilyTree.fileUploadDialog(args, function (file) {
                var formData = new FormData();
                formData.append('file', file);
                alert('upload the file');
            })
        });

        family.nodeMenuUI.on('show', function (sender, args) {

            var node = family.getNode(args.firstNodeId);

            if (FamilyTree.isNEU(node.fid)) {
                args.menu.father = {
                    icon: FamilyTree.icon.father(30, 30, "#039BE5"),
                    text: "Add father",
                    color: "white",
                };
            }

            if (FamilyTree.isNEU(node.mid)) {
                args.menu.mother = {
                    icon: FamilyTree.icon.mother(30, 30, "#F57C00"),
                    text: "Add mother",
                    color: "white",
                };
            }

            if (node.gender == "male") {
                args.menu.wife = {
                    icon: FamilyTree.icon.wife(30, 30, "#F57C00"),
                    text: "Add wife",
                    color: "white",
                };
            } else if (node.gender == "female" && node.pids.length == 0) {
                args.menu.husband = {
                    icon: FamilyTree.icon.husband(30, 30, "#F57C00"),
                    text: "Add husband",
                    color: "white",
                };
            }

            args.menu.son = {
                icon: FamilyTree.icon.son(30, 30, "#039BE5"),
                text: "Add son",
                color: "white",
            };

            args.menu.daughter = {
                icon: FamilyTree.icon.daughter(30, 30, "#F57C00"),
                text: "Add daughter",
                color: "white",
            };

            args.menu.details = { text: "Details" };
            args.menu.edit = { text: "Edit" };
            args.menu.remove = { text: "Remove" };
        });
    </script>
}
